----------------------------------------------
-- Set up table
----------------------------------------------
CREATE TABLE `lok_master_seq` (
  `idlok_all_seq` int(11) NOT NULL AUTO_INCREMENT,
  `object_type` varchar(45) NOT NULL COMMENT 'The table name for which sequence is to be created',
  `last_seq` int(11) NOT NULL DEFAULT '100000',
  `last_updated_by` varchar(45) DEFAULT NULL,
  `last_updated_date` date DEFAULT NULL,
  `object_intial` varchar(2) NOT NULL COMMENT 'It is the start which gets appended to the seq geneated. ',
  PRIMARY KEY (`idlok_all_seq`),
  UNIQUE KEY `object_type_UNIQUE` (`object_type`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 COMMENT='Generate sequences for all the tables. It stores last used sequence';


----------------------------------------------------------







-- billrecord seq generator

CREATE DEFINER=`root`@`localhost` TRIGGER `kplok_dev_db`.`billrecord_BEFORE_INSERT` BEFORE INSERT ON `billrecord` FOR EACH ROW
begin
set @bill_seq = 0;
set @bill_init = "";
if NEW.bno is null then
select t.last_seq,t.object_inital into @bill_seq,@bill_init from lok_master_seq t where t.object_type = 'billrecord';
set @bill_seq = @bill_seq+1;


set NEW.bno = concat(@bill_init, @bill_seq);
end if;

-- update the last seq
update lok_master_seq set last_seq = @bill_seq where object_type = 'billrecord';
end

-- ----------------------------------------------------------------------------------------------------

-- receipt record seq generator

CREATE DEFINER = CURRENT_USER TRIGGER `kplok_dev_db`.`receiptrecord_BEFORE_INSERT` BEFORE INSERT ON `receiptrecord` FOR EACH ROW
BEGIN
set @rec_seq = 0;
set @rec_init = "";
if NEW.rctn is null then
select t.last_seq,t.object_inital into @rec_seq,@rec_init from lok_master_seq t where t.object_type = 'receiptrecord';
set @rec_seq = @rec_seq+1;


set NEW.rctn = concat(@rec_init, @rec_seq);
end if;

-- update the last seq
update lok_master_seq set last_seq = @rec_seq where object_type = 'receiptrecord';

end


-- --- --------------------------------
-- KYC Documents, store
----
create table customerdetails (
CUSTOMERID varchar(7),
FIRSTNAME  varchar(100),
LASTNAME   varchar(100),
PPPATH    varchar(255),
AADHARPATH varchar(255),
DLICENSEPATH varchar(255),
ELECTRICITY varchar(255),
PHOTOPATH  varchar(255),
SIGNPATH   varchar(255),
EMAILID    varchar(255),
ALTEMAILID    varchar(255),
MOBILENUM  varchar(15),
ALTMOBILENUM  varchar(15),
PHONENUM   varchar(15),
ALTPHONENUM   varchar(15),
ADDRESS1   varchar(255),
ADDRESS2   varchar(255),
ADDRESS3   varchar(255),
CITY       varchar(255),
STATE      varchar(255),
COUNTRY    varchar(255),
PINCODE    varchar(255),
LANDMARK   varchar(255),
CREATEDBY  varchar(100),
CREATEDDATE date,
MODIFIEDBY  varchar(100),
MODIFIEDDATE date,
NOTES     varchar(4000),
FOLIONUM  VARCHAR(45));


--------------------------------------------
--trigger to create primary key
------------------------------
CREATE DEFINER=`root`@`localhost` TRIGGER `kplok_dev_db`.`customer_table_BEFORE_INSERT` BEFORE INSERT ON `customer_table` FOR EACH ROW
begin
set @cust_seq = 0;
set @cust_init = "";
if NEW.customerid is null then
select t.last_seq,t.object_inital into @cust_seq,@cust_init from lok_master_seq t where t.object_type = 'customer_table';
set @cust_seq = @cust_seq+1;


set NEW.customerid = concat(@cust_init, @cust_seq);
end if;

-- update the last seq
update lok_master_seq set last_seq = @cust_seq where object_type = 'customer_table';
end


-----------------------------------------------------
----- added columns for customer id, kyc documents linking
-----------------------------------------------------
ALTER TABLE `kplok_dev_db`.`partyrecord` 
ADD COLUMN `FIRSTCUSTOMER` VARCHAR(45) NULL AFTER `STPBL`,
ADD COLUMN `SECONDCUSTOMER` VARCHAR(45) NULL AFTER `FIRSTCUSTOMER`,
ADD COLUMN `THIRDCUSTOMER` VARCHAR(45) NULL AFTER `SECONDCUSTOMER`;



---------------------------------------
--- Add columns to partyrecord table to get the user preference for sending sms/email/print
-----------------------------------------

ALTER TABLE `kplok_dev_db`.`partyrecord` 
ADD COLUMN `SENDEMAIL1` VARCHAR(1) NULL AFTER `THIRDCUSTOMER`,
ADD COLUMN `SENDSMS1` VARCHAR(1) NULL AFTER `SENDEMAIL1`,
ADD COLUMN `SENDPRINT1` VARCHAR(1) NULL AFTER `SENDSMS1`,
ADD COLUMN `SENDEMAIL2` VARCHAR(1) NULL AFTER `SENDPRINT1`,
ADD COLUMN `SENDSMS2` VARCHAR(1) NULL AFTER `SENDEMAIL2`,
ADD COLUMN `SENDPRINT2` VARCHAR(1) NULL AFTER `SENDSMS2`,
ADD COLUMN `SENDEMAIL3` VARCHAR(1) NULL AFTER `SENDPRINT2`,
ADD COLUMN `SENDSMS3` VARCHAR(1) NULL AFTER `SENDEMAIL3`,
ADD COLUMN `SENDPRINT3` VARCHAR(1) NULL AFTER `SENDSMS3`;

-------------------------------------------------------------
--- Email and Sms sending status of Bill
-------------------------------------------------------------
ALTER TABLE `kplok_dev_db`.`billrecord` 
ADD COLUMN `SENDEMAIL` VARCHAR(1) NULL COMMENT 'P- Email is to sent\nY- Email has been successfully sent\nN or null - Email not to be sent\nF - Email sending is unsucessful because of errors' AFTER `REMDA6`,
ADD COLUMN `SENDSMS` VARCHAR(1) NULL COMMENT 'P- sms is to sent\nY- sms has been successfully sent\nN or null - sms not to be sent\nF - sms sending is unsucessful because of errors' AFTER `SENDEMAIL`;



---------------------------------------------------------------
--- New table to store outgoing email map
---------------------------------------------------------------
CREATE TABLE `kplok_dev_db`.`emailoutbound` (
  `objectid` VARCHAR(20) NOT NULL,
  `objecttype` VARCHAR(100) NOT NULL)
COMMENT = 'It has primary key & its table name for which email is to be generated. The process which add data to this table and then remove it on completion.';



ALTER TABLE `kplok_dev_db`.`emailoutbound` 
ADD PRIMARY KEY (`objectid`, `objecttype`);


-------------------------------------------------------------------
--- Email template table having all the templates
------------------------------------------------------------------
CREATE TABLE `kplok_dev_db`.`emailtemplate` (
  `emailtemplateid` INT NOT NULL,
  `from` VARCHAR(100) NULL,
  `tolist` VARCHAR(255) NULL,
  `cclist` VARCHAR(255) NULL,
  `subject` VARCHAR(255) NULL,
  `body` VARCHAR(4000) NULL COMMENT 'Html formatted body. It should be having replacement variable as ${} only those variables would be replaced by the value.',
  `datecreated` DATE NULL,
  PRIMARY KEY (`emailtemplateid`))
COMMENT = 'Stores all the templates for which email is to be generated. The set up template cannot be changed.\nFor every new page or template, develoer has to add the template. Supports one template for each table.\n';


ALTER TABLE `kplok_dev_db`.`emailtemplate` 
CHANGE COLUMN `from` `fromemail` VARCHAR(100) NULL DEFAULT NULL ;


ALTER TABLE `kplok_dev_db`.`emailtemplate` 
CHANGE COLUMN `emailtemplateid` `EMAILTEMPLATEID` INT(11) NOT NULL ,
CHANGE COLUMN `fromemail` `FROMEMAIL` VARCHAR(100) NULL ,
CHANGE COLUMN `tolist` `TOLIST` VARCHAR(255) NULL DEFAULT NULL ,
CHANGE COLUMN `cclist` `CCLIST` VARCHAR(255) NULL DEFAULT NULL ,
CHANGE COLUMN `subject` `SUBJECT` VARCHAR(255) NULL DEFAULT NULL ,
CHANGE COLUMN `body` `BODY` VARCHAR(4000) NULL DEFAULT NULL COMMENT 'Html formatted body. It should be having replacement variable as ${} only those variables would be replaced by the value.' ,
CHANGE COLUMN `datecreated` `DATECREATED` DATE NULL DEFAULT NULL ;



--------------------------------------------------------------------
--- Email Sent table. Having all the emails. Also useful for generating reports
--------------------------------------------------------------------

CREATE TABLE `kplok_dev_db`.`emailsent` (
  `OBJECTTYPE` VARCHAR(50) NOT NULL,
  `OBJECTID` VARCHAR(45) NULL,
  `TEMPLATEID` INT NULL,
  `TOLIST` VARCHAR(255) NULL,
  `FROM` VARCHAR(45) NULL,
  `CCLIST` VARCHAR(255) NULL,
  `BODY` VARCHAR(4000) NULL,
  `DATECREATED` DATE NULL,
  `CREATEDBY` VARCHAR(50) NULL,
  PRIMARY KEY (`OBJECTTYPE`))
COMMENT = 'Having records of all the emails that are sent by the java application running. ';


ALTER TABLE `kplok_dev_db`.`emailsent` 
CHANGE COLUMN `FROM` `FROMEMAIL` VARCHAR(45) NULL DEFAULT NULL ;




ALTER TABLE `kplok_dev_db`.`emailsent` 
CHANGE COLUMN `FROMEMAIL` `FROMEMAIL` VARCHAR(255) NULL DEFAULT NULL ;

ALTER TABLE `kplok_dev_db`.`emailsent` 
CHANGE COLUMN `OBJECTID` `OBJECTID` VARCHAR(45) NOT NULL ,
DROP PRIMARY KEY;



-------------------------------------------------------------------------
--- Security Deposit
------------------------------------------------------------------------
-- Add primary key constraint
ALTER TABLE `kplok_dev_db`.`sd` 
CHANGE COLUMN `SRCN` `SRCN` VARCHAR(8) NOT NULL COMMENT 'Security Deposit Key Num' ,
ADD PRIMARY KEY (`SRCN`);

ALTER TABLE `kplok_dev_db`.`sd` 
RENAME TO  `kplok_dev_db`.`securitydeposit` ;

